import{_ as e,c as a,a0 as d,o}from"./chunks/framework.Y1LMcfAt.js";const u=JSON.parse('{"title":"Getting Started","description":"","frontmatter":{"head":[["link",{"rel":"canonical","href":"https://riyaddecoder.github.io/react-audio-play/"}],["meta",{"property":"og:title","content":"Getting Started"}]]},"headers":[],"relativePath":"index.md","filePath":"index.md"}'),i={name:"index.md"};function s(n,t,l,r,h,p){return o(),a("div",null,t[0]||(t[0]=[d(`<h1 id="getting-started" tabindex="-1">Getting Started <a class="header-anchor" href="#getting-started" aria-label="Permalink to &quot;Getting Started&quot;">​</a></h1><h2 id="installation" tabindex="-1">Installation <a class="header-anchor" href="#installation" aria-label="Permalink to &quot;Installation&quot;">​</a></h2><p>Welcome to the Audio Player documentation. To get started, follow the steps below:</p><ol><li><p><strong>Install the package using npm:</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> react-audio-play</span></span></code></pre></div></li><li><p><strong>Alternatively, install with yarn:</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yarn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> react-audio-play</span></span></code></pre></div></li><li><p><strong>Import and use the <code>AudioPlayer</code> component in your project:</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { AudioPlayer } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;react-audio-play&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AudioPlayer</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;path/to/audio.mp3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>Customize the appearance and functionality as needed.</strong></p></li></ol><h2 id="props" tabindex="-1">Props <a class="header-anchor" href="#props" aria-label="Permalink to &quot;Props&quot;">​</a></h2><p>The <strong>AudioPlayer</strong> component accepts the following props:</p><table tabindex="0"><thead><tr><th>Prop</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>className</code></td><td>string, optional</td><td>A CSS class name for styling the component.</td></tr><tr><td><code>src</code></td><td>string, required</td><td>The URL or file path of the audio file to be played.</td></tr><tr><td><code>autoPlay</code></td><td>boolean, optional</td><td>Set to <code>true</code> to autoplay the audio (default: <code>false</code>).</td></tr><tr><td><code>preload</code></td><td>string, optional</td><td><ul><li><code>auto</code> - The audio data is loaded as soon as possible.</li> <li><code>metadata</code> - Only metadata (e.g., duration) is loaded.</li> <li><code>none</code> - No preloading. Audio data is only loaded when requested.</li></ul></td></tr><tr><td><code>loop</code></td><td>boolean, optional</td><td>Set to <code>true</code> to loop the audio playback (default: <code>false</code>).</td></tr><tr><td><code>volume</code></td><td>number, optional</td><td>The initial volume level (0 to 100) of the audio (default: <code>100</code>).</td></tr><tr><td><code>hasKeyBindings</code></td><td>boolean, optional</td><td>Specifies whether the <code>AudioPlayer</code> component should enable keyboard shortcuts for volume control and seeking (default: <code>true</code>).</td></tr><tr><td><code>onPlay</code></td><td>function, optional</td><td>Callback function to execute when the audio starts playing.</td></tr><tr><td><code>onPause</code></td><td>function, optional</td><td>Callback function to execute when the audio is paused.</td></tr><tr><td><code>onEnd</code></td><td>function, optional</td><td>Callback function to execute when the audio playback ends.</td></tr><tr><td><code>onError</code></td><td>function, optional</td><td>Callback function to execute if there’s an error loading or playing the audio.</td></tr><tr><td><code>backgroundColor</code></td><td>string, optional</td><td>Set the background color of the audio player (default: <code>#fff</code>).</td></tr><tr><td><code>color</code></td><td>string, optional</td><td>The text and icon color of the audio player (default: <code>#566574</code>).</td></tr><tr><td><code>sliderColor</code></td><td>string, optional</td><td>The color of the progress slider (default: <code>#007FFF</code>).</td></tr><tr><td><code>volumePlacement</code></td><td>string, optional</td><td>Control where the volume controls are located (\`top</td></tr><tr><td><code>width</code></td><td>string, optional</td><td>The width of the audio player. For example, <code>&quot;100%&quot;</code>, <code>&quot;300px&quot;</code>, etc.</td></tr><tr><td><code>style</code></td><td>object, optional</td><td>An object containing additional inline styles for the component.</td></tr></tbody></table><h2 id="keyboard-shortcuts" tabindex="-1">Keyboard Shortcuts <a class="header-anchor" href="#keyboard-shortcuts" aria-label="Permalink to &quot;Keyboard Shortcuts&quot;">​</a></h2><p>Below are the keyboard shortcuts available when the audio player is focused. They can be turned off by setting the <code>hasKeyBindings</code> prop to <code>false</code>.</p><table tabindex="0"><thead><tr><th>Key</th><th>Action</th></tr></thead><tbody><tr><td>Space</td><td>Play/Pause</td></tr><tr><td>←</td><td>Rewind</td></tr><tr><td>→</td><td>Forward</td></tr><tr><td>↑</td><td>Volume up</td></tr><tr><td>↓</td><td>Volume down</td></tr></tbody></table>`,10)]))}const k=e(i,[["render",s]]);export{u as __pageData,k as default};
